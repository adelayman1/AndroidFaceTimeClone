package com.adel.facetimeclone.domain.usecases

import com.adel.facetimeclone.data.model.RoomModel
import com.adel.facetimeclone.data.repository.UserRepositoryImpl
import com.adel.facetimeclone.domain.repository.RoomRepository
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.collect
import kotlinx.coroutines.flow.flow
import javax.inject.Inject

class GetAllCallsUseCase @Inject constructor(
    var roomRepository: RoomRepository,
    var userRepository: UserRepositoryImpl
) {
    suspend operator fun invoke(): Flow<List<RoomModel>> = flow {
        val userEmail = userRepository.getUser()!!.email!!
        val callsList: MutableList<RoomModel> = mutableListOf()
        roomRepository.getAllUserCalls(userEmail.replace(".", ",")).collect {
            callsList.clear()
            for (item in it) {
                if (item.roomType!! != "link") {
                    if (item.roomAuthor == userEmail.replace(".", ",")) {
                        // when room generated by me
                        if (!item.to.isNullOrEmpty()) {
                            // i called someone not empty call
                            val userNameResult = userRepository.getUserName(item.to.keys.first())
                            callsList.add(
                                RoomModel(
                                    item.roomType,
                                    if (item.to.size == 1) userNameResult else (userNameResult + " and ${(item.to.size - 1)} others"),
                                    item.to,
                                    item.time
                                )
                            )
                        }
                    } else {
                        // call generated from another one
                        val userNameResult = userRepository.getUserName(item.roomAuthor!!)
                        callsList.add(
                            RoomModel(
                                item.roomType,
                                userNameResult,
                                item.to,
                                item.time
                            )
                        )
                    }
                } else {
                    //just add it it's link only
                    callsList.add(item)
                }
            }
            emit(callsList)
        }
    }
}