package com.example.facetimeclonecompose.domain.usecases

import com.example.facetimeclonecompose.domain.models.RoomModel
import com.example.facetimeclonecompose.domain.repositories.RoomRepository
import com.example.facetimeclonecompose.domain.repositories.UserRepository
import com.example.facetimeclonecompose.domain.utilities.UserNotFoundException
import com.example.facetimeclonecompose.domain.utilities.UserNotVerifiedException
import javax.inject.Inject

class GetUserRoomsUseCase @Inject constructor(
    private val userRepository: UserRepository,
    private val roomRepository: RoomRepository
) {
    //TODO("REFACTORING")
    suspend operator fun invoke(): List<RoomModel>? {
        val newRooms: MutableList<RoomModel> = mutableListOf()
//        if (!userRepository.isUserLoggedIn()) TODO("Edit this")
//            throw UserNotFoundException()
//        if (!userRepository.isUserAccountVerified())
//            throw UserNotVerifiedException()
        val allRooms = roomRepository.getUserRooms()
        if (allRooms != null) {
            for (room in allRooms) {
                if (!room.isLinkRoom()) {
                    if (room.isRoomCreatedByMe()) {
                        if (room.isRoomHasParticipants()) {
                            val firstParticipantName = room.participants!![0].userName
                            newRooms.add(
                                RoomModel(
                                    roomId = room.roomId,
                                    roomType = room.roomType,
                                    roomTypeId = room.roomTypeId,
                                    roomAuthor = room.roomAuthor,
                                    roomTitle = if (room.participants.size == 1) firstParticipantName else (firstParticipantName + " and ${(room.participants.size - 1)} others"),
                                    participants = room.participants,
                                    time = room.time
                                )
                            )
                        }
                    } else {
                        // call generated by another user
                        newRooms.add(
                            RoomModel(
                                roomId = room.roomId,
                                roomType = room.roomType,
                                roomAuthor = room.roomAuthor,
                                roomTypeId = room.roomTypeId,
                                roomTitle = userRepository.getUserProfileData().userName,
                                participants = room.participants,
                                time = room.time
                            )
                        )
                    }
                } else {
                    //just add it it's link only
                    newRooms.add(room)
                }
            }
        }
        return newRooms
    }

    private fun RoomModel.isLinkRoom(): Boolean {
        return this.roomType == "link"
    }

    private suspend fun RoomModel.isRoomCreatedByMe(): Boolean {
        return this.roomAuthor == userRepository.getUserID()
    }

    private fun RoomModel.isRoomHasParticipants(): Boolean {
        return !participants.isNullOrEmpty()
    }
}